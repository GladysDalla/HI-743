knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nnet)
library(ISLR2)
data = Default
str(data)
ggplot(data, aes(x=balance , fill=default))+
geom_histogram(bins = 30, alpha=0.7, position='identity')+
labs(title = "Distribution of Balance by Default Status",
x= "Balance",
y= "Count")
ggplot(data, aes(x=income, fill = default))+
geom_histogram(bins = 30, alpha = 0.7, position = 'identity')+
labs(title = "Distribution of Income by Default Status",
x= "Income",
y= "Count")
ggplot(data, aes(x=income, fill = student))+
geom_histogram(bins = 30, alpha = 0.7, position = 'identity')+
labs(title = "Distribution of Income by Student Status",
x= "Income",
y= "Count")
ggplot(data, aes(x=student, fill = default))+
geom_bar(position = 'dodge')+
labs(title = "Default Status by Student Status",
x= "Students",
y= "Count")
logit_model = glm(default ~ balance, data=data, family=binomial)
summary(logit_model)
data$predicted_prob = predict(logit_model, type="response")
head(data)
threshold = 0.5
data$predicted_default = ifelse(data$predicted_prob > threshold, "Yes", "No")
conf_matrix = table(data$predicted_default, data$default)
conf_matrix
accuracy = sum(diag(conf_matrix)) / sum(conf_matrix)
accuracy
logit_mult_model = glm(default ~ balance + income * student, data=data, family=binomial)
summary(logit_mult_model)
data$mult_predicted_prob = predict(logit_mult_model, type = "response")
data$mult_predicted_default = ifelse(data$mult_predicted_prob > threshold, "Yes", "No")
conf_matrix_mult = table(data$mult_predicted_default, data$default)
conf_matrix_mult
accuracy_mult = sum(diag(conf_matrix_mult)) / sum(conf_matrix_mult)
accuracy_mult
data2 = Carseats
data2$SalesCategory = cut(data2$Sales, breaks = 3, labels = c("Low", "Medium", "High"))
multi_model = multinom(SalesCategory ~ Price + Income + Advertising, data = data2)
summary(multi_model)
data2$nomial_predicted_SalesCat = predict(multi_model)
head(data2)
conf_matrix_multi = table(data2$nomial_predicted_SalesCat, data2$SalesCategory)
conf_matrix_multi
accuracy_multi = sum(diag(conf_matrix_multi)) / sum(conf_matrix_multi)
accuracy_multi
# install.packages("mlbench")
library(mlbench)
install.packages("mlbench")
library(mlbench)
